{"version":3,"sources":["ItemList.js","components/LetterChoice.js","components/Timer.js","logo.png","components/MainGrid.js","App.js","reportWebVitals.js","index.js"],"names":["exports","itemList","LetterChoice","letterChoice","className","Timer","timer","MainGrid","gameState","startGame","Grid","columns","Row","Column","src","logo","alt","Button","color","size","onClick","gameStarted","itemArr","alert","Audio","App","setInterval","startTimer","setState","getRandomLetter","getItemArr","letterString","Math","floor","random","length","shuffle","slice","temporaryValue","randomIndex","currentIndex","mins","state","secs","resetGame","clearInterval","play","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac99ee05.chunk.js","sourcesContent":["exports.itemList = [\n  \"Color\", \"Boy name\", \"Girl name\", \"Car make\", \"Car model\", \"US President\", \"Flower\", \"Gemstone\", \"Tree\", \"Place to sit\", \"Found in park\", \"Breakfast food\", \"Ice cream\", \"Cheese\", \"Holiday tradition\", \"Animal\", \"US State\",  \"US City\", \"Smells good\", \"Vegetable\", \"Fruit\", \"Item in room\", \"Way to warm-up\", \"Superhero\", \"Movie title\", \"Family activity\", \"Cocktail\", \"Snack\", \"Beer\", \"Fictional character\", \"Dog breed\", \"Country\", \"Vacation activity\", \"Wedding gift\", \"Baby gift\", \"Computer activity\", \"Game\", \"Machine\", \"Condiment\", \"Clothing\", \"Shoe\", \"Language\", \"Cuisine\", \"Something you prepare\", \"Found at beach\", \"Emotion\", \"Tardy excuse\", \"Occupation\", \"Car part\", \"Camping item\", \"Hobby\", \"Cereal\", \"Dessert\", \"Cleaning item\", \"Disease\", \"Medication\", \"Instrument\", \"Mode of travel\", \"Phone app\", \"Reason to call parent\", \"Thing dogs love\", \"Song title\", \"Musical artist\", \"Way to pass time\", \"Something with wheels\", \"Insect\", \"Cooking utensil\", \"Store name\", \"Souvenir\", \"Reason to save money\", \"Cause of injury\", \"Sport\", \"Disney character\", \"In an amusement park\", \"From the 90’s\", \"Found in Las Vegas\", \"Warm vacation spot\", \"Secret\", \"School subject\", \"Jewelry\", \"Something Funny\", \"Birthday activity\", \"Non-alcoholic beverage\", \"Keepsake\", \"Reason to quit job\", \"Found in woods\", \"Pizza topping\", \"Type of exercise\", \"Podcast\", \"Reason to call in\", \"Body part\", \"Weather\", \"Appetizer\", \"Transportation mode\", \"Found in ocean\", \"Charitable organization\", \"Volunteer activity\", \"Crime\", \"Useful for protection\", \"Can’t live without\", \"Communication mode\", \"University\", \"Professional sports team\", \"College major\", \"Something you lose\", \"Reason to be happy\", \"Reason to be sad\", \"Service you pay for\", \"Reason to so see the doctor\", \"Thanksgiving food\", \"Brand of clothing\", \"Way to stay healthy\", \"Contains nuts\", \"Politician\", \"Controversial issue\", \"Reason to breakup\", \"Tool\", \"Found in kitchen\", \"Name in the bible\", \"Rainy day activity\"\n]\n","\nfunction LetterChoice({ letterChoice }) {\n\n  return (\n    <div>\n      <h1>Letter Choice</h1>\n      <p className=\"big-p\">{ letterChoice }</p>\n    </div>\n  );\n\n}\n\nexport default LetterChoice;\n","\nfunction Timer({timer}) {\n\n  return (\n    <div>\n      <h1>Timer</h1>\n      <p className=\"big-p\">{timer}</p>\n    </div>\n  );\n\n}\n\nexport default Timer;\n","export default __webpack_public_path__ + \"static/media/logo.1c945a31.png\";","import { Grid, Segment, Button } from 'semantic-ui-react';\nimport LetterChoice from './LetterChoice'\nimport Timer from './Timer'\nimport logo from '../logo.png';\n\nfunction MainGrid({ gameState, startGame }) {\n  return (\n    <div>\n      <Grid columns={3}>\n        <Grid.Row>\n          <Grid.Column>\n            <LetterChoice letterChoice={gameState.letterChoice}/>\n          </Grid.Column>\n          <Grid.Column>\n            <img className=\"main-logo\" src={logo} alt=\"\"/>\n            <Button\n              color='yellow'\n              size=\"massive\"\n              onClick={gameState.gameStarted ? null : startGame}\n            >\n              {gameState.gameStarted ? \"In Progress\" : \"Start Game\"}\n            </Button>\n          </Grid.Column>\n          <Grid.Column>\n          <Grid.Column>\n            <Timer timer={gameState.timer}/>\n          </Grid.Column>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row className=\"outline\">\n          <Grid.Column>\n            <p>{gameState.itemArr[0]}</p>\n            <p>{gameState.itemArr[1]}</p>\n            <p>{gameState.itemArr[2]}</p>\n            <p>{gameState.itemArr[3]}</p>\n          </Grid.Column>\n          <Grid.Column>\n            <p>{gameState.itemArr[4]}</p>\n            <p>{gameState.itemArr[5]}</p>\n            <p>{gameState.itemArr[6]}</p>\n            <p>{gameState.itemArr[7]}</p>\n          </Grid.Column>\n          <Grid.Column>\n            <p>{gameState.itemArr[8]}</p>\n            <p>{gameState.itemArr[9]}</p>\n            <p>{gameState.itemArr[10]}</p>\n            <p>{gameState.itemArr[11]}</p>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  )\n}\n\nexport default MainGrid;\n","\nimport { Component } from 'react';\nimport MainGrid from './components/MainGrid'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css';\nimport { itemList } from './ItemList.js'\nconst alert = new Audio('/ship_bell.mp3')\nlet timer;\n\n\nexport default class App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      letterChoice: \"-\",\n      timer: \"2:30\",\n      itemArr: [\"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\"],\n      gameStarted: false\n    }\n  }\n\n  startGame = () => {\n    timer = setInterval(this.startTimer, 1000)\n    this.setState({\n      letterChoice: this.getRandomLetter(),\n      itemArr: this.getItemArr(),\n      gameStarted: true,\n      timer: \"2:30\",\n    })\n  }\n\n  getRandomLetter = () => {\n    const letterString = \"ABCDEFGHIJKLMNOPRSTVWY\"\n    const index = Math.floor(Math.random() * letterString.length)\n    return letterString[index]\n  }\n\n  getItemArr = () => {\n    return this.shuffle().slice(0, 12)\n  }\n\n  shuffle = () => {\n    let currentIndex = itemList.length;\n    let temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = itemList[currentIndex];\n      itemList[currentIndex] = itemList[randomIndex];\n      itemList[randomIndex] = temporaryValue;\n    }\n    return itemList;\n  }\n\n  startTimer = () => {\n    let mins = this.state.timer.slice(0, 1);\n    let secs = this.state.timer.slice(2, 5);\n    if (secs === \"00\"){\n      secs = 59;\n      mins -= 1;\n    } else {\n      secs -= 1;\n      secs = secs < 10 ? \"0\" + secs : secs;\n    }\n    this.setState({\n      timer: `${mins}:${secs}`\n    })\n    if (mins === \"0\" && secs === \"00\"){\n      this.resetGame()\n    }\n  }\n\n\n\n  resetGame = () => {\n    clearInterval(timer)\n    alert.play()\n    this.setState({\n      gameStarted: false\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainGrid gameState={this.state} startGame={this.startGame}/>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}